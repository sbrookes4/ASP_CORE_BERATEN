using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace BeratenHealthcareModels
{
    public class CaseIntake
    {
        public CaseIntake()
        {
            PresentingProblemsArray = new List<string>();
        }

        public int Id { get; set; }

        public int ClientId { get; set; }
        public virtual Client Client { get; set; }

        [StringLength(20)]
        public string CaseNumber { get; set; } // This will be auto generated by System

        [Required(ErrorMessage = "Case Name is required")]
        [StringLength(2000, ErrorMessage = "Case Name exceeded the max {1} characters")]
        public string CaseName { get; set; }

        [Display(Name = "Intake Date")]
        [DataType(DataType.Date, ErrorMessage = "Intake Date is not a valid date")]
        [Required(ErrorMessage = "Intake Date is required")]
        public DateTime IntakeDate { get; set; }

        [Display(Name = "Intake Time")]
        [DataType(DataType.Time, ErrorMessage = "Intake Time is not a valid date")]
        [Required(ErrorMessage = "Intake Time is required")]
        public DateTime IntakeTime { get; set; }

        [Display(Name = "Intake Method")]
        public int IntakeMethodLookupId { get; set; }

        public IntakeMethodLookup IntakeMethodLookup { get; set; }

        [Display(Name = "Urgency Level")]
        public int UrgencyLevelLookupId { get; set; }

        public UrgencyLevelLookup UrgencyLevelLookup { get; set; }

        [Display(Name = "Referral Source")]
        public int? ReferralSourceLookupId { get; set; }

        public ReferralSourceLookup ReferralSourceLookup { get; set; }

        [Required(ErrorMessage = "Referral Contact Name is required")]
        [StringLength(2000, ErrorMessage = "Referral Contact Name exceeded the max {1} characters")]
        public string ReferralContactName { get; set; }

        [Required(ErrorMessage = "Referral Reason is required")]
        [StringLength(2000, ErrorMessage = "Referral Reason exceeded the max {1} characters")]
        public string ReferralReason { get; set; }

        [StringLength(2000, ErrorMessage = "Presenting Problems exceeded the max {1} characters")]
        public string PresentingProblems { get; set; }

        #region Presenting Issues Tab

        public int AbuseLookupId { get; set; }
        public AbuseLookup AbuseLookup { get; set; }

        [StringLength(1000)]
        public string AbuseDesc { get; set; }

        #endregion Presenting Issues Tab

        [Display(Name = "Prior Services Description")]
        [StringLength(2000, ErrorMessage = "Prior Services Description exceeded the max {1} characters")]
        public string PriorServicesDesc { get; set; }

        [Display(Name = "Prior Hospitalization Description ")]
        [StringLength(2000, ErrorMessage = "Prior Services Description exceeded the max {1} characters")]
        public string PriorHospitalizationDesc { get; set; }

        [Display(Name = "Prior Medical Conditions And Treatments Description")]
        [StringLength(2000, ErrorMessage = "Prior Medical Conditions And Treatments Description exceeded the max {1} characters")]
        public string PriorMedicalConditionsAndTreatmentsDesc { get; set; }

        [Display(Name = "Current Living Situation And Family Relations")]
        [StringLength(2000, ErrorMessage = "Current Living Situation And Family Relations exceeded the max {1} characters")]
        public string CurrentLivingSituationAndFamilyRelations { get; set; }

        [Display(Name = "Case Formulation")]
        [StringLength(2000, ErrorMessage = "Case Formulation exceeded the max {1} characters")]
        public string CaseFormulation { get; set; }

        [Display(Name = "Dsm Diagnosis")]
        [StringLength(2000, ErrorMessage = "Dsm Diagnosis exceeded the max {1} characters")]
        public string DsmDiagnosis { get; set; } // This will be filled with ICD-10 Diagnostics Code

        // This must be associated with funding source as part of Case Note
        //public int ProgramsLookupId { get; set; }
        //public ProgramsLookup ProgramsLookup { get; set; }

        public int FirstDispositionLookupId { get; set; }
        public FirstDispositionLookup FirstDispositionLookup { get; set; } // Intake Decision

        [StringLength(100)]
        public string IntakeTakendBy { get; set; }

        public bool IsCompleted { get; set; }

        public DateTime? DateIntakeCompleted { get; set; }

        [Required]
        [StringLength(50)]
        public string RecordedBy { get; set; }

        [Required]
        public DateTime RecordedOn { get; set; } = DateTime.Now;

        [NotMapped]
        public List<string> PresentingProblemsArray { get; set; }

        public string IntakeDateFormatted
        {
            get
            {
                return IntakeDate.ToString("MMM-dd-yyyy");
            }
        }
    }
}