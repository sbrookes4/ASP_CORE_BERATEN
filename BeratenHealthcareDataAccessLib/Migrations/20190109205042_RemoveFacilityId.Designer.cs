// <auto-generated />
using System;
using BeratenHealthcareDataAccessLib;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BeratenHealthcareDataAccessLib.Migrations
{
    [DbContext(typeof(PositivityModel))]
    [Migration("20190109205042_RemoveFacilityId")]
    partial class RemoveFacilityId
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BeratenHealthcareModels.AbuseLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("AbuseLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.ActivityLevelLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ActivityLevelLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.AffectLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("AffectLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.AlertnessLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("AlertnessLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.AppearanceLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("AppearanceLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.AppointmentStatusLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("AppointmentStatusLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.AppRole", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("AppRoles");
                });

            modelBuilder.Entity("BeratenHealthcareModels.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CellPhone")
                        .HasMaxLength(17);

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("LastActiveDate");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LoginId")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Prefix")
                        .HasMaxLength(50);

                    b.Property<string>("RecordedBy")
                        .IsRequired();

                    b.Property<DateTime>("RecordedOn");

                    b.Property<string>("Suffix")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("BeratenHealthcareModels.AppUserRole", b =>
                {
                    b.Property<int>("AppUserId");

                    b.Property<int>("AppRoleId");

                    b.HasKey("AppUserId", "AppRoleId");

                    b.HasIndex("AppRoleId");

                    b.ToTable("AppUserRoles");
                });

            modelBuilder.Entity("BeratenHealthcareModels.AssociationsLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("AssociationsLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.AttentionLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("AttentionLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.AttitudeLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("AttitudeLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.BehaviorWithCareGiversLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("BehaviorWithCareGiversLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.BehaviorWithExaminersLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("BehaviorWithExaminersLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.BillingProcedure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CPTCode");

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<int>("UnitOfMeasure");

                    b.Property<decimal>("UnitPrice");

                    b.Property<DateTime?>("ValidFrom");

                    b.Property<DateTime?>("ValidTo");

                    b.HasKey("Id");

                    b.ToTable("BillingProcedure");
                });

            modelBuilder.Entity("BeratenHealthcareModels.BodyMovementLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("BodyMovementLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.BodyTypeLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("BodyTypeLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.CaseDischarge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CaseIntakeId");

                    b.Property<string>("ContactInfo")
                        .HasMaxLength(1000);

                    b.Property<int>("DischareReasonLookupId");

                    b.Property<string>("DischargeCompletedBy")
                        .HasMaxLength(50);

                    b.Property<DateTime>("DischargeDate");

                    b.Property<string>("DischargeRecommendation")
                        .HasMaxLength(1000);

                    b.Property<DateTime?>("DischargeTime");

                    b.Property<bool>("IsCompleted");

                    b.Property<string>("Phone")
                        .HasMaxLength(17);

                    b.Property<string>("PossiblePostDischargeProblems")
                        .HasMaxLength(1000);

                    b.Property<string>("RecordedBy")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("RecordedOn");

                    b.Property<DateTime?>("TransferredDate");

                    b.Property<string>("TransferredTo")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("CaseIntakeId");

                    b.HasIndex("DischareReasonLookupId");

                    b.ToTable("CaseDischarges");
                });

            modelBuilder.Entity("BeratenHealthcareModels.CaseIntake", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AbuseDesc")
                        .HasMaxLength(1000);

                    b.Property<int>("AbuseLookupId");

                    b.Property<string>("CaseFormulation")
                        .HasMaxLength(2000);

                    b.Property<string>("CaseName")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("CaseNumber")
                        .HasMaxLength(20);

                    b.Property<int>("ClientId");

                    b.Property<string>("CurrentLivingSituationAndFamilyRelations")
                        .HasMaxLength(2000);

                    b.Property<DateTime?>("DateIntakeCompleted");

                    b.Property<string>("DsmDiagnosis")
                        .HasMaxLength(2000);

                    b.Property<int>("FirstDispositionLookupId");

                    b.Property<DateTime>("IntakeDate");

                    b.Property<int>("IntakeMethodLookupId");

                    b.Property<string>("IntakeTakendBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("IntakeTime");

                    b.Property<bool>("IsCompleted");

                    b.Property<string>("PresentingProblems")
                        .HasMaxLength(2000);

                    b.Property<string>("PriorHospitalizationDesc")
                        .HasMaxLength(2000);

                    b.Property<string>("PriorMedicalConditionsAndTreatmentsDesc")
                        .HasMaxLength(2000);

                    b.Property<string>("PriorServicesDesc")
                        .HasMaxLength(2000);

                    b.Property<string>("RecordedBy")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("RecordedOn");

                    b.Property<string>("ReferralContactName")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("ReferralReason")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<int?>("ReferralSourceLookupId");

                    b.Property<int>("UrgencyLevelLookupId");

                    b.HasKey("Id");

                    b.HasIndex("AbuseLookupId");

                    b.HasIndex("ClientId");

                    b.HasIndex("FirstDispositionLookupId");

                    b.HasIndex("IntakeMethodLookupId");

                    b.HasIndex("ReferralSourceLookupId");

                    b.HasIndex("UrgencyLevelLookupId");

                    b.ToTable("CaseIntakes");
                });

            modelBuilder.Entity("BeratenHealthcareModels.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(250);

                    b.Property<string>("Alias")
                        .HasMaxLength(100);

                    b.Property<bool>("CanLeaveMsgOnPriPhone");

                    b.Property<bool>("CanLeaveMsgOnSecPhone");

                    b.Property<string>("City")
                        .HasMaxLength(50);

                    b.Property<string>("County")
                        .HasMaxLength(50);

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<int>("EthnicityHispanicLookupId");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("GenderLookupId");

                    b.Property<bool>("IsBillingAddress");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("MaritalStatusLookupId");

                    b.Property<string>("MedicalRecordNumber")
                        .HasMaxLength(20);

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100);

                    b.Property<byte[]>("Photo");

                    b.Property<int>("PreferredLanguageLookupId");

                    b.Property<string>("PrimaryPhone")
                        .HasMaxLength(17);

                    b.Property<int>("RaceLookupId");

                    b.Property<string>("RecordedBy")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("RecordedOn");

                    b.Property<string>("SSN")
                        .HasMaxLength(11);

                    b.Property<string>("SecondaryPhone")
                        .HasMaxLength(17);

                    b.Property<int>("SpecialNeedsLookupId");

                    b.Property<int?>("StateLookupId");

                    b.Property<string>("Zip")
                        .HasMaxLength(5);

                    b.HasKey("Id");

                    b.HasIndex("EthnicityHispanicLookupId");

                    b.HasIndex("GenderLookupId");

                    b.HasIndex("MaritalStatusLookupId");

                    b.HasIndex("PreferredLanguageLookupId");

                    b.HasIndex("RaceLookupId");

                    b.HasIndex("SpecialNeedsLookupId");

                    b.HasIndex("StateLookupId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("BeratenHealthcareModels.ClientCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId");

                    b.Property<string>("ClinicName")
                        .HasMaxLength(500);

                    b.Property<int>("Dependents");

                    b.Property<int>("FamilyOriginLookupId");

                    b.Property<int>("IncomeSourceLookupId");

                    b.Property<int>("LivingArrangementLookupId");

                    b.Property<double>("MonthlyIncome");

                    b.Property<string>("PhysicianName")
                        .HasMaxLength(100);

                    b.Property<string>("PhysicianPhone")
                        .HasMaxLength(17);

                    b.Property<DateTime?>("RecentClinicVisitDate");

                    b.Property<string>("RecordedBy")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("RecordedOn");

                    b.Property<int>("ResidenceLookupId");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("FamilyOriginLookupId");

                    b.HasIndex("IncomeSourceLookupId");

                    b.HasIndex("LivingArrangementLookupId");

                    b.HasIndex("ResidenceLookupId");

                    b.ToTable("ClientConditions");
                });

            modelBuilder.Entity("BeratenHealthcareModels.ComprehensiveAssessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssessmentCompletedBy")
                        .HasMaxLength(50);

                    b.Property<DateTime>("AssessmentDate");

                    b.Property<int>("CaseIntakeId");

                    b.Property<string>("CommunityInvolvmentDesc")
                        .HasMaxLength(2000);

                    b.Property<DateTime?>("DateAssessmentCompleted");

                    b.Property<int?>("EducationLookupId");

                    b.Property<string>("EmploymentHistory")
                        .HasMaxLength(2000);

                    b.Property<int?>("EmploymentLookupId");

                    b.Property<string>("HistoricalBehavioralData")
                        .HasMaxLength(2000);

                    b.Property<string>("HistoricalDevelopmentalData")
                        .HasMaxLength(2000);

                    b.Property<string>("HistoricalEmotionalData")
                        .HasMaxLength(2000);

                    b.Property<string>("HistoricalFamilyData")
                        .HasMaxLength(2000);

                    b.Property<string>("HistoricalLegalIssuesDesc")
                        .HasMaxLength(2000);

                    b.Property<string>("HistoricalMedicationData")
                        .HasMaxLength(2000);

                    b.Property<string>("HistoricalNutritionalDesc")
                        .HasMaxLength(2000);

                    b.Property<string>("HistoricalPsychiatricData")
                        .HasMaxLength(2000);

                    b.Property<string>("HistoricalRecreationalData")
                        .HasMaxLength(2000);

                    b.Property<string>("HistoricalSocialData")
                        .HasMaxLength(2000);

                    b.Property<string>("HistoricalSubstanceAbuseData")
                        .HasMaxLength(2000);

                    b.Property<bool>("IsCompleted");

                    b.Property<string>("RecordedBy")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("RecordedOn");

                    b.Property<string>("RelationshipWithClassmatesDesc")
                        .HasMaxLength(2000);

                    b.Property<string>("RelationshipWithManagementDesc")
                        .HasMaxLength(2000);

                    b.Property<string>("RelationshipWithPeersDesc")
                        .HasMaxLength(2000);

                    b.Property<string>("RelationshipWithStaffDesc")
                        .HasMaxLength(2000);

                    b.Property<string>("School")
                        .HasMaxLength(100);

                    b.Property<string>("SchoolAttendanceAndAdditionalNotesDesc")
                        .HasMaxLength(2000);

                    b.Property<string>("SchoolEducationalAndVocationalGoalsDesc")
                        .HasMaxLength(2000);

                    b.Property<decimal?>("SchoolGPA");

                    b.Property<int?>("SchoolGrade");

                    b.Property<string>("SchoolSpecialNeedsDesc")
                        .HasMaxLength(2000);

                    b.Property<string>("SchoolTeacher")
                        .HasMaxLength(100);

                    b.Property<string>("SocialRelationshipDesc")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.HasIndex("CaseIntakeId");

                    b.HasIndex("EducationLookupId");

                    b.HasIndex("EmploymentLookupId");

                    b.ToTable("ComprehensiveAssessments");
                });

            modelBuilder.Entity("BeratenHealthcareModels.ConcentrationLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ConcentrationLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.ContactMethodLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ContactMethodLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.Coverage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId");

                    b.Property<decimal>("CoPayAmount");

                    b.Property<decimal>("ContractedRateWithInsurer");

                    b.Property<int>("CoverageRank");

                    b.Property<int>("CoverageType");

                    b.Property<DateTime?>("EffectiveFrom");

                    b.Property<DateTime?>("EffectiveUntil");

                    b.Property<int?>("EligibilityLookupId");

                    b.Property<string>("GroupNumber")
                        .HasMaxLength(100);

                    b.Property<string>("InsuranceNotes")
                        .HasMaxLength(1000);

                    b.Property<string>("MedicaidEligibilityNotes")
                        .HasMaxLength(2000);

                    b.Property<string>("MedicaidNumber")
                        .HasMaxLength(1000);

                    b.Property<string>("MedicaidWorker")
                        .HasMaxLength(100);

                    b.Property<bool>("MedicareA");

                    b.Property<bool>("MedicareB");

                    b.Property<bool>("MedicareD");

                    b.Property<string>("MedicareNotes")
                        .HasMaxLength(2000);

                    b.Property<string>("MedicareNumber")
                        .HasMaxLength(100);

                    b.Property<string>("MedicarePhone")
                        .HasMaxLength(17);

                    b.Property<string>("MemberNumber")
                        .HasMaxLength(100);

                    b.Property<int?>("PayorId");

                    b.Property<string>("PlanName")
                        .HasMaxLength(100);

                    b.Property<string>("PlanSubscriberEmployer")
                        .HasMaxLength(100);

                    b.Property<string>("PriorAuthNumber")
                        .HasMaxLength(100);

                    b.Property<string>("RecordedBy")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("RecordedOn");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("EligibilityLookupId");

                    b.HasIndex("PayorId");

                    b.ToTable("Coverages");
                });

            modelBuilder.Entity("BeratenHealthcareModels.DegreeOfRiskLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("DegreeOfRiskLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.DelusionsLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("DelusionsLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.DischareReasonLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("DischareReasonLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.EatingPatternsLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("EatingPatternsLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.EducationLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("EducationLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.EligibilityLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("EligibilityLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.EmploymentLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("EmploymentLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.EnglishLanguageSkillsLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("EnglishLanguageSkillsLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.ErrorLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Error")
                        .HasMaxLength(8000);

                    b.Property<string>("ErrorSource")
                        .HasMaxLength(1000);

                    b.Property<string>("LoggedBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("LoggedOn");

                    b.HasKey("Id");

                    b.ToTable("ErrorLogs");
                });

            modelBuilder.Entity("BeratenHealthcareModels.EthnicityHispanicLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("EthnicityHispanicLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.ExpressiveLanguageLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ExpressiveLanguageLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.EyeContactLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("EyeContactLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.FacialExpressionLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("FacialExpressionLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.Facility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(250);

                    b.Property<string>("City")
                        .HasMaxLength(50);

                    b.Property<string>("County")
                        .HasMaxLength(50);

                    b.Property<string>("FacilityCode")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("PrimaryPhone")
                        .HasMaxLength(17);

                    b.Property<string>("RecordedBy")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("RecordedOn");

                    b.Property<string>("SecondaryPhone")
                        .HasMaxLength(17);

                    b.Property<int?>("StateLookupId");

                    b.Property<string>("Zip")
                        .HasMaxLength(5);

                    b.HasKey("Id");

                    b.HasIndex("StateLookupId");

                    b.ToTable("Facilities");
                });

            modelBuilder.Entity("BeratenHealthcareModels.FamilyOriginLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("FamilyOriginLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.FineMotorLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("FineMotorLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.FirstDispositionLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("FirstDispositionLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.FrustrationToleranceLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("FrustrationToleranceLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.FutureOrientLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("FutureOrientLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.GaitLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("GaitLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.GenderLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("GenderLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.GeneralKnowledgeLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("GeneralKnowledgeLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.GrossMotorLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("GrossMotorLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.Guardian", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(250);

                    b.Property<string>("Alias")
                        .HasMaxLength(100);

                    b.Property<string>("City")
                        .HasMaxLength(50);

                    b.Property<int>("ClientId");

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<int?>("EthnicityHispanicLookupId");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("GenderLookupId");

                    b.Property<bool>("IsEmergencyContact");

                    b.Property<bool>("IsFinanciallyResponsible");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100);

                    b.Property<string>("PrimaryPhone")
                        .HasMaxLength(17);

                    b.Property<int?>("RaceLookupId");

                    b.Property<string>("RecordedBy")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("RecordedOn");

                    b.Property<int>("RelationshipTypeLookupId");

                    b.Property<string>("SecondaryPhone")
                        .HasMaxLength(17);

                    b.Property<int?>("StateLookupId");

                    b.Property<string>("Zip")
                        .HasMaxLength(5);

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("EthnicityHispanicLookupId");

                    b.HasIndex("GenderLookupId");

                    b.HasIndex("RaceLookupId");

                    b.HasIndex("RelationshipTypeLookupId");

                    b.HasIndex("StateLookupId");

                    b.ToTable("Guardians");
                });

            modelBuilder.Entity("BeratenHealthcareModels.HallucinationsLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("HallucinationsLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.HygieneLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("HygieneLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.ImpulseControlLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ImpulseControlLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.IncomeSourceLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("IncomeSourceLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.InsightLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("InsightLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.IntakeMethodLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("IntakeMethodLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.IntellectualFunctionLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("IntellectualFunctionLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.IntellectualLevelLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("IntellectualLevelLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.InterviewLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("InterviewLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.JudgementLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("JudgementLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.LivingArrangementLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("LivingArrangementLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.MaritalStatusLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("MaritalStatusLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.MascularLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("MascularLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.MemoryLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("MemoryLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.MentalHealthAssessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActivityLevel")
                        .HasMaxLength(2000);

                    b.Property<string>("Affect")
                        .HasMaxLength(2000);

                    b.Property<string>("Alertness")
                        .HasMaxLength(2000);

                    b.Property<string>("Appearance")
                        .HasMaxLength(2000);

                    b.Property<string>("AssessmentCompletedBy")
                        .HasMaxLength(50);

                    b.Property<string>("AssessmentConducteddBy")
                        .HasMaxLength(50);

                    b.Property<DateTime>("AssessmentDate");

                    b.Property<string>("Associations")
                        .HasMaxLength(2000);

                    b.Property<string>("Attention")
                        .HasMaxLength(2000);

                    b.Property<string>("Attitude")
                        .HasMaxLength(2000);

                    b.Property<string>("BehaviorWithCareGivers")
                        .HasMaxLength(2000);

                    b.Property<string>("BehaviorWithExaminers")
                        .HasMaxLength(2000);

                    b.Property<string>("BodyMovement")
                        .HasMaxLength(2000);

                    b.Property<string>("BodyType")
                        .HasMaxLength(2000);

                    b.Property<int>("CaseIntakeId");

                    b.Property<byte[]>("CompletingSupervisorSignature");

                    b.Property<string>("Concentration")
                        .HasMaxLength(2000);

                    b.Property<byte[]>("ConductingClinicianSignature");

                    b.Property<DateTime?>("DateClinitianSignedOn");

                    b.Property<DateTime?>("DateSupervisorSignedOn");

                    b.Property<string>("DegreeOfRisk")
                        .HasMaxLength(2000);

                    b.Property<string>("Delusions")
                        .HasMaxLength(2000);

                    b.Property<string>("DsmDiagnosis")
                        .HasMaxLength(2000);

                    b.Property<string>("EatingPatterns")
                        .HasMaxLength(2000);

                    b.Property<string>("ExpressiveLanguage")
                        .HasMaxLength(2000);

                    b.Property<string>("EyeContact")
                        .HasMaxLength(2000);

                    b.Property<string>("FacialExpression")
                        .HasMaxLength(2000);

                    b.Property<string>("FineMotor")
                        .HasMaxLength(2000);

                    b.Property<string>("FrustrationTolerance")
                        .HasMaxLength(2000);

                    b.Property<string>("FutureOrient")
                        .HasMaxLength(2000);

                    b.Property<string>("Gait")
                        .HasMaxLength(2000);

                    b.Property<string>("GeneralKnowledge")
                        .HasMaxLength(2000);

                    b.Property<string>("GrossMotor")
                        .HasMaxLength(2000);

                    b.Property<string>("Hallucinations")
                        .HasMaxLength(2000);

                    b.Property<string>("Hygiene")
                        .HasMaxLength(2000);

                    b.Property<string>("ImpulseControl")
                        .HasMaxLength(2000);

                    b.Property<string>("Insight")
                        .HasMaxLength(2000);

                    b.Property<string>("IntellectualFunction")
                        .HasMaxLength(2000);

                    b.Property<string>("IntellectualLevel")
                        .HasMaxLength(2000);

                    b.Property<string>("Interview")
                        .HasMaxLength(2000);

                    b.Property<bool>("IsCompleted");

                    b.Property<string>("Judgement")
                        .HasMaxLength(2000);

                    b.Property<string>("Mascular")
                        .HasMaxLength(2000);

                    b.Property<string>("Memory")
                        .HasMaxLength(2000);

                    b.Property<string>("Mood")
                        .HasMaxLength(2000);

                    b.Property<string>("MotorBehavior")
                        .HasMaxLength(2000);

                    b.Property<string>("Orientation")
                        .HasMaxLength(2000);

                    b.Property<string>("OtherHarm")
                        .HasMaxLength(2000);

                    b.Property<string>("Phobia")
                        .HasMaxLength(2000);

                    b.Property<string>("ReceptiveLanguage")
                        .HasMaxLength(2000);

                    b.Property<string>("RecordedBy")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("RecordedOn");

                    b.Property<string>("SelfHarm")
                        .HasMaxLength(2000);

                    b.Property<string>("SelfSoothingCapacity")
                        .HasMaxLength(2000);

                    b.Property<string>("SensoryCognition")
                        .HasMaxLength(2000);

                    b.Property<string>("SensoryIntegration")
                        .HasMaxLength(2000);

                    b.Property<string>("SleepPatterns")
                        .HasMaxLength(2000);

                    b.Property<string>("Speech")
                        .HasMaxLength(2000);

                    b.Property<string>("Suicide")
                        .HasMaxLength(2000);

                    b.Property<string>("ThoughtContent")
                        .HasMaxLength(2000);

                    b.Property<string>("ThoughtProcess")
                        .HasMaxLength(2000);

                    b.Property<string>("Transitions")
                        .HasMaxLength(2000);

                    b.Property<string>("UnusualBehaviorPattern")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.HasIndex("CaseIntakeId");

                    b.ToTable("MentalHealthAssessments");
                });

            modelBuilder.Entity("BeratenHealthcareModels.MoodLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("MoodLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.MotorBehaviorLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("MotorBehaviorLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.OrientationLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("OrientationLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.OtherHarmLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("OtherHarmLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.Payor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(100);

                    b.Property<string>("City")
                        .HasMaxLength(100);

                    b.Property<string>("Fax")
                        .HasMaxLength(15);

                    b.Property<string>("PayorName")
                        .HasMaxLength(250);

                    b.Property<int>("PayorType");

                    b.Property<string>("Phone")
                        .HasMaxLength(15);

                    b.Property<string>("RecordedBy")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("RecordedOn");

                    b.Property<int>("StateLookupId");

                    b.Property<string>("Zip")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("StateLookupId");

                    b.ToTable("Payor");
                });

            modelBuilder.Entity("BeratenHealthcareModels.PhobiaLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("PhobiaLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.PreferredLanguageLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("PreferredLanguageLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.PresentingProblemsLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("PresentingProblemsLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.ProblemDomainLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ProblemDomainLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.ProgramsLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ProgramsLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.ProgressNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppUserId");

                    b.Property<int>("AppointmentStatusLookupId");

                    b.Property<int?>("BillingProcedureId");

                    b.Property<int>("CaseIntakeId");

                    b.Property<int>("ContactMethodLookupId");

                    b.Property<DateTime>("DateOfService");

                    b.Property<float?>("Duration");

                    b.Property<bool>("IsCompleted");

                    b.Property<bool>("IsNonBillable");

                    b.Property<string>("Narrative");

                    b.Property<bool>("NotifyOthers");

                    b.Property<string>("RecordedBy")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("RecordedOn");

                    b.Property<int>("ServiceLocationLookupId");

                    b.Property<DateTime?>("TimeOfService");

                    b.Property<int?>("TreatmentGoalId");

                    b.Property<int>("TreatmentModalityLookupId");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("AppointmentStatusLookupId");

                    b.HasIndex("BillingProcedureId");

                    b.HasIndex("CaseIntakeId");

                    b.HasIndex("ContactMethodLookupId");

                    b.HasIndex("ServiceLocationLookupId");

                    b.HasIndex("TreatmentGoalId");

                    b.HasIndex("TreatmentModalityLookupId");

                    b.ToTable("ProgressNotes");
                });

            modelBuilder.Entity("BeratenHealthcareModels.RaceLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("RaceLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.ReceptiveLanguageLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ReceptiveLanguageLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.ReferralSourceLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ReferralSourceLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.RelationshipTypeLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("RelationshipTypeLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.ResidenceLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ResidenceLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.SchoolsLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("SchoolsLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.SelfHarmLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("SelfHarmLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.SelfSoothingCapacityLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("SelfSoothingCapacityLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.SensoryCognitionLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("SensoryCognitionLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.SensoryIntegrationLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("SensoryIntegrationLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.ServiceLocationLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ServiceLocationLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.SleepPatternsLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("SleepPatternsLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.SpecialNeedsLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("SpecialNeedsLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.SpeechLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("SpeechLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.StateLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("StateLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.SuicideLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("SuicideLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.ThoughtContentLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ThoughtContentLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.ThoughtProcessLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ThoughtProcessLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.TransitionsLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("TransitionsLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.TreatmentGoal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateOfOutcome");

                    b.Property<int>("FrequencyOfIntervention");

                    b.Property<string>("Goal")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<bool>("IsCompleted");

                    b.Property<string>("Modalities")
                        .HasMaxLength(500);

                    b.Property<int>("Outcome");

                    b.Property<string>("Problem")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<int>("ProgressRating");

                    b.Property<string>("RecordedBy")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("RecordedOn");

                    b.Property<DateTime>("TargetDate");

                    b.Property<int>("TreatmentPlanId");

                    b.HasKey("Id");

                    b.HasIndex("TreatmentPlanId");

                    b.ToTable("TreatmentGoals");
                });

            modelBuilder.Entity("BeratenHealthcareModels.TreatmentModalityLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("TreatmentModalityLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.TreatmentPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApproveddBySupervisor");

                    b.Property<string>("AttendingClientFamilyNames")
                        .HasMaxLength(1000);

                    b.Property<string>("AttendingStaffNames")
                        .HasMaxLength(1000);

                    b.Property<int>("CaseIntakeId");

                    b.Property<byte[]>("ClientDigitalSignature");

                    b.Property<string>("ClientSign")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("DateClientSigned");

                    b.Property<DateTime?>("DateSupervisorSigned");

                    b.Property<bool>("IsLocked");

                    b.Property<string>("LengthOfTreatment")
                        .HasMaxLength(500);

                    b.Property<DateTime>("PlanDate");

                    b.Property<string>("PlanName")
                        .HasMaxLength(2000);

                    b.Property<DateTime?>("PlanTime");

                    b.Property<string>("Problems")
                        .HasMaxLength(2000);

                    b.Property<string>("ReasonForNoClientSign")
                        .HasMaxLength(50);

                    b.Property<string>("RecordedBy")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("RecordedOn");

                    b.Property<string>("Strengths")
                        .HasMaxLength(2000);

                    b.Property<byte[]>("SupervisorSignature");

                    b.HasKey("Id");

                    b.HasIndex("CaseIntakeId");

                    b.ToTable("TreatmentPlans");
                });

            modelBuilder.Entity("BeratenHealthcareModels.UnusualBehaviorPatternsLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("UnusualBehaviorPatternsLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.UrgencyLevelLookup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("UrgencyLevelLookup");
                });

            modelBuilder.Entity("BeratenHealthcareModels.Widget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsMyStuff");

                    b.Property<int>("UserId");

                    b.Property<int>("WidgetComponentId");

                    b.Property<int>("WidgetOrder");

                    b.HasKey("Id");

                    b.ToTable("Widgets");
                });

            modelBuilder.Entity("BeratenHealthcareModels.AppUser", b =>
                {
                    b.HasOne("BeratenHealthcareModels.Facility")
                        .WithMany("AppUsers")
                        .HasForeignKey("FacilityId");
                });

            modelBuilder.Entity("BeratenHealthcareModels.AppUserRole", b =>
                {
                    b.HasOne("BeratenHealthcareModels.AppRole", "AppRole")
                        .WithMany("AppUserRoles")
                        .HasForeignKey("AppRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BeratenHealthcareModels.AppUser", "AppUser")
                        .WithMany("AppUserRoles")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BeratenHealthcareModels.CaseDischarge", b =>
                {
                    b.HasOne("BeratenHealthcareModels.CaseIntake", "CaseIntake")
                        .WithMany()
                        .HasForeignKey("CaseIntakeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BeratenHealthcareModels.DischareReasonLookup", "DischareReasonLookup")
                        .WithMany()
                        .HasForeignKey("DischareReasonLookupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BeratenHealthcareModels.CaseIntake", b =>
                {
                    b.HasOne("BeratenHealthcareModels.AbuseLookup", "AbuseLookup")
                        .WithMany()
                        .HasForeignKey("AbuseLookupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BeratenHealthcareModels.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BeratenHealthcareModels.FirstDispositionLookup", "FirstDispositionLookup")
                        .WithMany()
                        .HasForeignKey("FirstDispositionLookupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BeratenHealthcareModels.IntakeMethodLookup", "IntakeMethodLookup")
                        .WithMany()
                        .HasForeignKey("IntakeMethodLookupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BeratenHealthcareModels.ReferralSourceLookup", "ReferralSourceLookup")
                        .WithMany()
                        .HasForeignKey("ReferralSourceLookupId");

                    b.HasOne("BeratenHealthcareModels.UrgencyLevelLookup", "UrgencyLevelLookup")
                        .WithMany()
                        .HasForeignKey("UrgencyLevelLookupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BeratenHealthcareModels.Client", b =>
                {
                    b.HasOne("BeratenHealthcareModels.EthnicityHispanicLookup", "EthnicityHispanicLookup")
                        .WithMany()
                        .HasForeignKey("EthnicityHispanicLookupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BeratenHealthcareModels.GenderLookup", "GenderLookup")
                        .WithMany()
                        .HasForeignKey("GenderLookupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BeratenHealthcareModels.MaritalStatusLookup", "MaritalStatusLookup")
                        .WithMany()
                        .HasForeignKey("MaritalStatusLookupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BeratenHealthcareModels.PreferredLanguageLookup", "PreferredLanguageLookup")
                        .WithMany()
                        .HasForeignKey("PreferredLanguageLookupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BeratenHealthcareModels.RaceLookup", "RaceLookup")
                        .WithMany()
                        .HasForeignKey("RaceLookupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BeratenHealthcareModels.SpecialNeedsLookup", "SpecialNeedsLookup")
                        .WithMany()
                        .HasForeignKey("SpecialNeedsLookupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BeratenHealthcareModels.StateLookup", "StateLookup")
                        .WithMany()
                        .HasForeignKey("StateLookupId");
                });

            modelBuilder.Entity("BeratenHealthcareModels.ClientCondition", b =>
                {
                    b.HasOne("BeratenHealthcareModels.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BeratenHealthcareModels.FamilyOriginLookup", "FamilyOriginLookup")
                        .WithMany()
                        .HasForeignKey("FamilyOriginLookupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BeratenHealthcareModels.IncomeSourceLookup", "IncomeSourceLookup")
                        .WithMany()
                        .HasForeignKey("IncomeSourceLookupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BeratenHealthcareModels.LivingArrangementLookup", "LivingArrangementLookup")
                        .WithMany()
                        .HasForeignKey("LivingArrangementLookupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BeratenHealthcareModels.ResidenceLookup", "ResidenceLookup")
                        .WithMany()
                        .HasForeignKey("ResidenceLookupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BeratenHealthcareModels.ComprehensiveAssessment", b =>
                {
                    b.HasOne("BeratenHealthcareModels.CaseIntake", "CaseIntake")
                        .WithMany()
                        .HasForeignKey("CaseIntakeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BeratenHealthcareModels.EducationLookup", "EducationLookup")
                        .WithMany()
                        .HasForeignKey("EducationLookupId");

                    b.HasOne("BeratenHealthcareModels.EmploymentLookup", "EmploymentLookup")
                        .WithMany()
                        .HasForeignKey("EmploymentLookupId");
                });

            modelBuilder.Entity("BeratenHealthcareModels.Coverage", b =>
                {
                    b.HasOne("BeratenHealthcareModels.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BeratenHealthcareModels.EligibilityLookup", "EligibilityLookup")
                        .WithMany()
                        .HasForeignKey("EligibilityLookupId");

                    b.HasOne("BeratenHealthcareModels.Payor", "Payor")
                        .WithMany()
                        .HasForeignKey("PayorId");
                });

            modelBuilder.Entity("BeratenHealthcareModels.Facility", b =>
                {
                    b.HasOne("BeratenHealthcareModels.StateLookup", "StateLookup")
                        .WithMany()
                        .HasForeignKey("StateLookupId");
                });

            modelBuilder.Entity("BeratenHealthcareModels.Guardian", b =>
                {
                    b.HasOne("BeratenHealthcareModels.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BeratenHealthcareModels.EthnicityHispanicLookup", "EthnicityHispanicLookup")
                        .WithMany()
                        .HasForeignKey("EthnicityHispanicLookupId");

                    b.HasOne("BeratenHealthcareModels.GenderLookup", "GenderLookup")
                        .WithMany()
                        .HasForeignKey("GenderLookupId");

                    b.HasOne("BeratenHealthcareModels.RaceLookup", "RaceLookup")
                        .WithMany()
                        .HasForeignKey("RaceLookupId");

                    b.HasOne("BeratenHealthcareModels.RelationshipTypeLookup", "RelationshipTypeLookup")
                        .WithMany()
                        .HasForeignKey("RelationshipTypeLookupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BeratenHealthcareModels.StateLookup", "StateLookup")
                        .WithMany()
                        .HasForeignKey("StateLookupId");
                });

            modelBuilder.Entity("BeratenHealthcareModels.MentalHealthAssessment", b =>
                {
                    b.HasOne("BeratenHealthcareModels.CaseIntake", "CaseIntake")
                        .WithMany()
                        .HasForeignKey("CaseIntakeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BeratenHealthcareModels.Payor", b =>
                {
                    b.HasOne("BeratenHealthcareModels.StateLookup", "StateLookup")
                        .WithMany()
                        .HasForeignKey("StateLookupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BeratenHealthcareModels.ProgressNote", b =>
                {
                    b.HasOne("BeratenHealthcareModels.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BeratenHealthcareModels.AppointmentStatusLookup", "AppointmentStatusLookup")
                        .WithMany()
                        .HasForeignKey("AppointmentStatusLookupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BeratenHealthcareModels.BillingProcedure", "BillingProcedure")
                        .WithMany()
                        .HasForeignKey("BillingProcedureId");

                    b.HasOne("BeratenHealthcareModels.CaseIntake", "CaseIntake")
                        .WithMany()
                        .HasForeignKey("CaseIntakeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BeratenHealthcareModels.ContactMethodLookup", "ContactMethodLookup")
                        .WithMany()
                        .HasForeignKey("ContactMethodLookupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BeratenHealthcareModels.ServiceLocationLookup", "ServiceLocationLookup")
                        .WithMany()
                        .HasForeignKey("ServiceLocationLookupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BeratenHealthcareModels.TreatmentGoal", "TreatmentGoal")
                        .WithMany()
                        .HasForeignKey("TreatmentGoalId");

                    b.HasOne("BeratenHealthcareModels.TreatmentModalityLookup", "TreatmentModalityLookup")
                        .WithMany()
                        .HasForeignKey("TreatmentModalityLookupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BeratenHealthcareModels.TreatmentGoal", b =>
                {
                    b.HasOne("BeratenHealthcareModels.TreatmentPlan", "TreatmentPlan")
                        .WithMany("Goals")
                        .HasForeignKey("TreatmentPlanId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BeratenHealthcareModels.TreatmentPlan", b =>
                {
                    b.HasOne("BeratenHealthcareModels.CaseIntake", "CaseIntake")
                        .WithMany()
                        .HasForeignKey("CaseIntakeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
